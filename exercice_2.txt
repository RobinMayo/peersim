EXERCICE II


Question 1 :

1. Si le noeud fautif est en section critique, il peut ne pas avoir le temps de transmettre le jeton et ainsi de désigner un nouveau noeud élue. Cela provoquerait le bloquage du système. 

2. Dans la classe Application, l'attribut next n'est modifié que dans les méthodes : initialisation, releaseCS, receive_request et receive_token. Les modifications dans initialisation et receive_request concerne l'initialisation du système dans la quelle la file est toujours vide. Ainsi, si le noeud fautif possède une file next non vide, il est forcément en section critique, dans ce cas cela provoque le bloquage du système comme expliqué dans la question 1.1.

En effet, à la réception d'un token, le noeud ajoute à sa liste personnel de noeuds en attente d'exécution, la liste transmise. En sachant que la liste personnelle du noeud est toujours vidé à la fin de la section critique dans la méthode releaseCS.

3. Si le noeud fautif possède une file next vide, n’est pointé par aucun last et aucun message à sa destination n’est en transit soit :
- Il a fait une demande de section critique est est dans la liste des noeuds en attentes du jeton. Dans ce cas le système finira par aboutir à un inter blocage.
- Il n'a pas fait de demande de section critique. Alors il disparaîtra du système impacter son exécution globale.


Question 2 :

simulation.experiments 1
random.seed 6
network.size 5
simulation.endtime 20000

protocol.reliableTransport UniformRandomTransport
protocol.reliableTransport.mindelay 5
protocol.reliableTransport.maxdelay 15

protocol.FIFOTransport projetara.util.FIFOTransport
protocol.FIFOTransport.transport reliableTransport

protocol.basicbroadcast projetara.application.ApplicationCheckpointable
protocol.basicbroadcast.timeCS 20
protocol.basicbroadcast.timeBetweenCS 10
protocol.basicbroadcast.transport FIFOTransport

control.crash projetara.checkpointing.CrashControler
control.crash.probacrash 0.1
control.crash.faulty_nodes 4
control.crash.checkpointer 10
control.crash.step 100

init.constantes Constantes
init.constantes.loglevel INFO


Question 3 :

La méthode createCheckpoint n'est pas appelée avec une période fixe et égale pour tout les noeuds afin de simuler un système réel dont les horloges internes des processus ne sont pas accessible et pas forcément synchronisés. On utilise donc un random afin de provoquer un checkpoint non coordonnée.
Un checkpoint synchronisé constituait un cas particulier exceptionnel dans un système réel.
